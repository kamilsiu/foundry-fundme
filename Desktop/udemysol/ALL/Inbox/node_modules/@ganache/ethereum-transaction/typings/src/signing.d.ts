/// <reference types="node" />
import { Data, Quantity } from "@ganache/utils";
import { EIP1559FeeMarketRawTransaction, EIP2930AccessListRawTransaction, LegacyRawTransaction, TypedRawTransaction } from "./raw";
import { Address } from "@ganache/ethereum-address";
export declare const isValidSigRecovery: (recovery: number) => boolean;
/**
 *
 * @param sharedBuffer - A Buffer, where bytes 0 - 97 are to be used by this function
 * @param r -
 * @param s -
 * @param msgHash -
 * @param recovery -
 */
export declare const ecdsaRecover: (partialRlp: {
    output: Buffer[] | Readonly<Buffer[]>;
    length: number;
}, sharedBuffer: Buffer, v: bigint, chainId: bigint, rBuf: Buffer, sBuf: Buffer) => Buffer;
/**
 *
 * @param sharedBuffer - A Buffer, bytes 0 - 65 will be overwritten
 * @param senderPubKey -
 */
export declare const publicKeyConvert: (sharedBuffer: Buffer, senderPubKey: Buffer) => Buffer;
export declare const computeFromAddress: (partialRlp: {
    output: Buffer[] | Readonly<Buffer[]>;
    length: number;
}, v: bigint, rBuf: Buffer, sBuf: Buffer, chainId: bigint) => Address;
export declare const computeIntrinsicsLegacyTx: (v: Quantity, raw: LegacyRawTransaction, chainId: bigint) => {
    from: Address;
    hash: Data;
    serialized: Buffer;
};
/**
 * Encodes the given `raw` data and prepends the `prefix` to the output Buffer.
 * @param prefix must be smaller than 0x7f https://eips.ethereum.org/EIPS/eip-2718#transactiontype-only-goes-up-to-0x7f
 * @param raw
 * @returns
 */
export declare const encodeWithPrefix: (prefix: number, raw: TypedRawTransaction) => Buffer;
/**
 * Digests the rlp `ranges` and prepends the `prefix` to the output Buffer.
 *
 * This function avoids the need to copy the output of `digest` into a new
 * prefixed buffer by over provisioning the initial output buffer.
 * @param prefix must be smaller than 0x7f https://eips.ethereum.org/EIPS/eip-2718#transactiontype-only-goes-up-to-0x7f
 * @param ranges
 * @param length
 * @returns
 */
export declare const digestWithPrefix: (prefix: number, ranges: (readonly Buffer[])[], length: number) => Buffer;
export declare const computeIntrinsicsAccessListTx: (v: Quantity, raw: EIP2930AccessListRawTransaction) => {
    from: Address;
    hash: Data;
    serialized: Buffer;
};
export declare const computeIntrinsicsFeeMarketTx: (v: Quantity, raw: EIP1559FeeMarketRawTransaction) => {
    from: Address;
    hash: Data;
    serialized: Buffer;
};
//# sourceMappingURL=signing.d.ts.map