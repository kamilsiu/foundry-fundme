/// <reference types="node" />
import { Data, Quantity } from "@ganache/utils";
import { GanacheRawBlockTransactionMetaData, TypedTransaction, TypedTransactionJSON } from "@ganache/ethereum-transaction";
import type { Common } from "@ethereumjs/common";
import { BlockHeader } from "./helpers";
import { BlockRawTransaction, EthereumRawBlockHeader, WithdrawalRaw } from "./serialize";
export type { BlockHeader } from "./helpers";
export type BaseFeeHeader = BlockHeader & Required<Pick<BlockHeader, "baseFeePerGas">>;
export declare class Block {
    /**
     *  Base fee per gas for blocks without a parent containing a base fee per gas.
     */
    static readonly INITIAL_BASE_FEE_PER_GAS: 1000000000n;
    protected _size: number;
    protected _raw: EthereumRawBlockHeader;
    protected _common: Common;
    protected _rawTransactions: BlockRawTransaction[];
    protected _rawTransactionMetaData: GanacheRawBlockTransactionMetaData[];
    protected _rawWithdrawals: WithdrawalRaw[] | null;
    header: BlockHeader;
    constructor(serialized: Buffer, common: Common);
    /**
     * Migrates a serialized Block to the latest version. This should only be
     * called on serialized data from blocks created before v7.8.0.
     *
     * This migration updates the `size` value of the block to the correct value
     * by re-serializing the block for storage in the db.
     * @param serialized
     * @returns
     */
    static migrate(serialized: Buffer): Buffer;
    private _hash;
    hash(): Data;
    getTransactions(): (import("@ganache/ethereum-transaction").EIP2930AccessListTransaction | import("@ganache/ethereum-transaction").LegacyTransaction | import("@ganache/ethereum-transaction").EIP1559FeeMarketTransaction)[];
    toJSON<IncludeTransactions extends boolean>(includeFullTransactions: IncludeTransactions): {
        size: Quantity;
        transactions: IncludeTransactions extends true ? TypedTransactionJSON[] : Data[];
        uncles: Data[];
        withdrawals: import("./serialize").Withdrawal[];
        parentHash: Data;
        sha3Uncles: Data;
        miner: Data;
        stateRoot: Data;
        transactionsRoot: Data;
        receiptsRoot: Data;
        logsBloom: Data;
        difficulty: Quantity;
        totalDifficulty: Quantity;
        number: Quantity;
        gasLimit: Quantity;
        gasUsed: Quantity;
        timestamp: Quantity;
        extraData: Data;
        mixHash: Data;
        nonce: Data;
        baseFeePerGas?: Quantity;
        withdrawalsRoot?: Data;
        hash: Data;
    };
    getTxFn<IncludeTransactions extends boolean>(include?: IncludeTransactions): (tx: TypedTransaction) => ReturnType<TypedTransaction["toJSON"]> | Data;
    static calcNextBaseFeeBigInt(parentHeader: BaseFeeHeader): bigint;
    static calcNBlocksMaxBaseFee(blocks: number, parentHeader: BaseFeeHeader): bigint;
    static calcNextBaseFee(parentBlock: Block): bigint;
}
//# sourceMappingURL=block.d.ts.map