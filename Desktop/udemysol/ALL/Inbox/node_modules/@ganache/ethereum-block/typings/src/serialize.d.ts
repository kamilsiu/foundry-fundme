/// <reference types="node" />
import { Common } from "@ethereumjs/common";
import { Address } from "@ganache/ethereum-address";
import { GanacheRawBlockTransactionMetaData, GanacheRawExtraTx, LegacyRawTransaction } from "@ganache/ethereum-transaction";
import { Quantity } from "@ganache/utils";
export type WithdrawalRaw = [
    index: Buffer,
    validatorIndex: Buffer,
    address: Buffer,
    amount: Buffer
];
export type Withdrawal = {
    index: Quantity;
    validatorIndex: Quantity;
    address: Address;
    amount: Quantity;
};
export type GanacheRawBlockExtras = [
    totalDifficulty: Buffer,
    transactionMetaData: GanacheRawBlockTransactionMetaData[],
    ethereumRawBlockSize: Buffer
];
export type EthereumRawBlockHeader = [
    parentHash: Buffer,
    sha3Uncles: Buffer,
    miner: Buffer,
    stateRoot: Buffer,
    transactionsRoot: Buffer,
    receiptsRoot: Buffer,
    logsBloom: Buffer,
    difficulty: Buffer,
    number: Buffer,
    gasLimit: Buffer,
    gasUsed: Buffer,
    timestamp: Buffer,
    extraData: Buffer,
    mixHash: Buffer,
    nonce: Buffer,
    baseFeePerGas?: Buffer,
    withdrawalsRoot?: Buffer
];
export type BlockRawTransaction = Buffer | LegacyRawTransaction;
type _EthereumRawBlock = [
    rawHeader: EthereumRawBlockHeader,
    rawTransactions: BlockRawTransaction[],
    uncles: [],
    withdrawals: WithdrawalRaw[]
];
export type EthereumRawBlock = _EthereumRawBlock | Head<_EthereumRawBlock>;
/**
 * Omits the last element from a Tuple
 */
export type Head<T extends any[]> = T extends [...infer Head, any] ? Head : any[];
export type GanacheRawBlock = [...EthereumRawBlock, ...GanacheRawBlockExtras];
/**
 * Serializes a block to compute its size and store it in the database.
 * @param start
 * @param end
 * @returns
 */
export declare function serialize(start: Head<EthereumRawBlock> | EthereumRawBlock, end: Head<GanacheRawBlockExtras>): {
    serialized: Buffer;
    size: number;
};
/**
 * Converts a raw transaction encoded for use in a raw block into a `Transaction`
 *
 * @param raw the raw transaction data after the block has been rlp decoded.
 * @param common
 * @param extra
 * @returns
 */
export declare function blockTransactionFromRaw(raw: BlockRawTransaction, common: Common, extra: GanacheRawExtraTx): import("@ganache/ethereum-transaction").EIP2930AccessListTransaction | import("@ganache/ethereum-transaction").LegacyTransaction | import("@ganache/ethereum-transaction").EIP1559FeeMarketTransaction;
export declare function convertRawWithdrawals([index, validatorIndex, address, amount]: WithdrawalRaw): Withdrawal;
export {};
//# sourceMappingURL=serialize.d.ts.map