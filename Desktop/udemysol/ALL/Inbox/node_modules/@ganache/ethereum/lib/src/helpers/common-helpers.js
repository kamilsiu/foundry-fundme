"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.changeCommonParamValue = exports.removeEIP3860InitCodeSizeLimitCheck = void 0;
/**
 * Effectively removes the 3860 InitCode Size Limit check by increasing the init
 * code size to Number.MAX_SAFE_INTEGER.
 *
 * This number works because an initcode can practically never be that large
 * (approx 9 PetaBytes!).
 *
 * @param common
 * @returns
 */
function removeEIP3860InitCodeSizeLimitCheck(common) {
    // this is a hack until EJS ships `allowUnlimitedInitCodeSize` option https://github.com/ethereumjs/ethereumjs-monorepo/issues/2588
    return changeCommonParamValue(common, 3860, "vm", "maxInitCodeSize", 
    // we'd use Infinity if we could, but that's not a valid BigInt
    BigInt(Number.MAX_SAFE_INTEGER));
}
exports.removeEIP3860InitCodeSizeLimitCheck = removeEIP3860InitCodeSizeLimitCheck;
function changeCommonParamValue(common, eip, topic, name, value) {
    const original = common.paramByEIP.bind(common);
    common.paramByEIP = function (paramTopic, paramName, paramEip) {
        if (paramTopic === topic && paramName === name && paramEip === eip) {
            return value;
        }
        return original.call(common, paramTopic, paramName, paramEip);
    };
}
exports.changeCommonParamValue = changeCommonParamValue;
//# sourceMappingURL=common-helpers.js.map